# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "test" ]

jobs:
  # build_app:
  #   runs-on: ubuntu-latest
    
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Set up JDK 17
  #     uses: actions/setup-java@v4
  #     with:
  #       java-version: '17'
  #       distribution: 'temurin'
        
  #   # Configure Gradle for optimal use in GiHub Actions, including caching of downloaded dependencies.
  #   # See: https://github.com/gradle/actions/blob/main/setup-gradle/README.md
  #   - name: Setup Gradle2
  #     uses: gradle/actions/setup-gradle@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
  #   - name: Build with Gradle Wrapper
  #     run: cd demo1 && ./gradlew build -x test

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKERHUB_USERNAME }}
  #       password: ${{ secrets.DOCKERHUB_TOKEN }}

  #   - name: Docker Build Image
  #     run : |
  #       docker build -t nowsopt .
  #       docker tag nowsopt ${{ secrets.DOCKER_REGISTRY_URI }}
    
  #   - name: Login to ECR
  #     uses: docker/login-action@v3
  #     with:
  #       registry: 471112612111.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  #       username: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  #   - name : docker image to Registry
  #     run : |
  #       docker push ${{ secrets.DOCKER_REGISTRY_URI }}
  deploy_app:
    # needs : build_app
    name: Deploy to EC2
    runs-on: ubuntu-latest
    
    steps:
     
      - name: Build & Deploy
        env: 
          SSH_HOST : ${{ secrets.REMOTE_IP }} # 인스턴스 IP
          SSH_USER : ubuntu
          SSH_PEM_KEY : ${{ secrets.AWS_EC2_PEM_KEY }}
        run : |
            sudo apt-get install openssh-server
            echo "$SSH_PEM_KEY" >> $HOME/key.pem
            chmod 400 $HOME/key.pem
            ssh -i $HOME/key.pem -o StrictHostKeyChecking=no ${SSH_USER}@${SSH_HOST}

      - name : ECR Login
        run : |
            aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin 471112612111.dkr.ecr.ap-southeast-2.amazonaws.com
      - name : Docker Pull image 
        run : | 
            docker pull ${{ secrets.DOCKER_REGISTRY_URI }}
            docker run -it nowsopt
